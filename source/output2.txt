[Ident { ident: "spec", span: #0 bytes(149..153) }, Ident { ident: "fn", span: #0 bytes(154..156) }, Ident { ident: "divides", span: #0 bytes(157..164) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "factor", span: #0 bytes(165..171) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(171..172) }, Ident { ident: "nat", span: #0 bytes(173..176) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(176..177) }, Ident { ident: "candidate", span: #0 bytes(178..187) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(187..188) }, Ident { ident: "nat", span: #0 bytes(189..192) }], span: #0 bytes(164..193) }, Punct { ch: '-', spacing: Joint, span: #0 bytes(194..195) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(195..196) }, Ident { ident: "bool", span: #0 bytes(197..201) }, Ident { ident: "recommends", span: #0 bytes(206..216) }, Literal { kind: Integer, symbol: "1", suffix: None, span: #0 bytes(217..218) }, Punct { ch: '<', spacing: Joint, span: #0 bytes(219..220) }, Punct { ch: '=', spacing: Alone, span: #0 bytes(220..221) }, Ident { ident: "factor", span: #0 bytes(222..228) }, Group { delimiter: Brace, stream: TokenStream [Ident { ident: "candidate", span: #0 bytes(235..244) }, Punct { ch: '%', spacing: Alone, span: #0 bytes(245..246) }, Ident { ident: "factor", span: #0 bytes(247..253) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(254..255) }, Punct { ch: '=', spacing: Alone, span: #0 bytes(255..256) }, Literal { kind: Integer, symbol: "0", suffix: None, span: #0 bytes(257..258) }], span: #0 bytes(229..260) }, Ident { ident: "spec", span: #0 bytes(262..266) }, Ident { ident: "fn", span: #0 bytes(267..269) }, Ident { ident: "is_prime", span: #0 bytes(270..278) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "candidate", span: #0 bytes(279..288) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(288..289) }, Ident { ident: "nat", span: #0 bytes(290..293) }], span: #0 bytes(278..294) }, Punct { ch: '-', spacing: Joint, span: #0 bytes(295..296) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(296..297) }, Ident { ident: "bool", span: #0 bytes(298..302) }, Group { delimiter: Brace, stream: TokenStream [Punct { ch: '&', spacing: Joint, span: #0 bytes(309..310) }, Punct { ch: '&', spacing: Joint, span: #0 bytes(310..311) }, Punct { ch: '&', spacing: Alone, span: #0 bytes(311..312) }, Literal { kind: Integer, symbol: "1", suffix: None, span: #0 bytes(313..314) }, Punct { ch: '<', spacing: Alone, span: #0 bytes(315..316) }, Ident { ident: "candidate", span: #0 bytes(317..326) }, Punct { ch: '&', spacing: Joint, span: #0 bytes(331..332) }, Punct { ch: '&', spacing: Joint, span: #0 bytes(332..333) }, Punct { ch: '&', spacing: Alone, span: #0 bytes(333..334) }, Ident { ident: "forall", span: #0 bytes(335..341) }, Punct { ch: '|', spacing: Alone, span: #0 bytes(341..342) }, Ident { ident: "factor", span: #0 bytes(342..348) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(348..349) }, Ident { ident: "nat", span: #0 bytes(350..353) }, Punct { ch: '|', spacing: Alone, span: #0 bytes(353..354) }, Literal { kind: Integer, symbol: "1", suffix: None, span: #0 bytes(355..356) }, Punct { ch: '<', spacing: Alone, span: #0 bytes(357..358) }, Ident { ident: "factor", span: #0 bytes(359..365) }, Punct { ch: '<', spacing: Alone, span: #0 bytes(366..367) }, Ident { ident: "candidate", span: #0 bytes(368..377) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(378..379) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(379..380) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(380..381) }, Punct { ch: '!', spacing: Alone, span: #0 bytes(382..383) }, Ident { ident: "divides", span: #0 bytes(383..390) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "factor", span: #0 bytes(391..397) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(397..398) }, Ident { ident: "candidate", span: #0 bytes(399..408) }], span: #0 bytes(390..409) }], span: #0 bytes(303..411) }, Ident { ident: "spec", span: #0 bytes(413..417) }, Ident { ident: "fn", span: #0 bytes(418..420) }, Ident { ident: "is_three_prime", span: #0 bytes(421..435) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(435..437) }, Punct { ch: '-', spacing: Joint, span: #0 bytes(438..439) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(439..440) }, Ident { ident: "bool", span: #0 bytes(441..445) }, Group { delimiter: Brace, stream: TokenStream [Punct { ch: '&', spacing: Joint, span: #0 bytes(452..453) }, Punct { ch: '&', spacing: Joint, span: #0 bytes(453..454) }, Punct { ch: '&', spacing: Alone, span: #0 bytes(454..455) }, Literal { kind: Integer, symbol: "1", suffix: None, span: #0 bytes(456..457) }, Punct { ch: '<', spacing: Alone, span: #0 bytes(458..459) }, Literal { kind: Integer, symbol: "3", suffix: None, span: #0 bytes(460..461) }, Punct { ch: '&', spacing: Joint, span: #0 bytes(466..467) }, Punct { ch: '&', spacing: Joint, span: #0 bytes(467..468) }, Punct { ch: '&', spacing: Alone, span: #0 bytes(468..469) }, Punct { ch: '!', spacing: Alone, span: #0 bytes(470..471) }, Ident { ident: "divides", span: #0 bytes(471..478) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Integer, symbol: "2", suffix: None, span: #0 bytes(479..480) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(480..481) }, Literal { kind: Integer, symbol: "3", suffix: None, span: #0 bytes(482..483) }], span: #0 bytes(478..484) }], span: #0 bytes(446..487) }, Ident { ident: "fn", span: #0 bytes(489..491) }, Ident { ident: "main", span: #0 bytes(492..496) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(496..498) }, Group { delimiter: Brace, stream: TokenStream [Ident { ident: "assert", span: #0 bytes(591..597) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "is_prime", span: #0 bytes(598..606) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Integer, symbol: "3", suffix: None, span: #0 bytes(607..608) }], span: #0 bytes(606..609) }], span: #0 bytes(597..610) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(610..611) }, Ident { ident: "assert", span: #0 bytes(616..622) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "is_three_prime", span: #0 bytes(623..637) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(637..639) }], span: #0 bytes(622..640) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(640..641) }], span: #0 bytes(499..1777) }]
