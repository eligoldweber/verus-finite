building vargo
    Finished release [optimized] target(s) in 0.08s
[34mvargo info [1]: building rust_verify[0m
    Finished dev [unoptimized + debuginfo] target(s) in 0.13s
[34mvargo info [1]: building builtin[0m
    Finished dev [unoptimized + debuginfo] target(s) in 0.08s
[34mvargo info [1]: building builtin_macros[0m
   Compiling builtin_macros v0.1.0 (/Users/flytre/Projects/verus-finite/source/builtin_macros)
warning: unnecessary parentheses around `if` condition
   --> builtin_macros/src/lib.rs:109:7
    |
109 |     if(!is_user_function()) {
    |       ^                   ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
109 -     if(!is_user_function()) {
109 +     if !is_user_function() {
    |

warning: `builtin_macros` (lib) generated 1 warning (run `cargo fix --lib -p builtin_macros` to apply 1 suggestion)
    Finished dev [unoptimized + debuginfo] target(s) in 1.33s
[34mvargo info [1]: building state_machines_macros[0m
    Finished dev [unoptimized + debuginfo] target(s) in 0.03s
[34mvargo info [1]: building vstd_build[0m
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
[34mvargo info [1]: building verus[0m
    Finished dev [unoptimized + debuginfo] target(s) in 0.06s
[34mvargo info [1]: vstd outdated, rebuilding[0m
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/vstd_build target-verus/debug`
ran
verification results:: 817 verified, 0 errors
[34mvargo info [0]: rebuilding: done[0m
    Finished dev [unoptimized + debuginfo] target(s) in 0.10s
     Running `target/debug/rust_verify /Users/flytre/Projects/verus-finite/finite_examples/primeEx.rs`
warning: verus was compiled in debug mode, which will result in worse performance
Before: TokenStream [Punct { ch: '#', spacing: Alone, span: #0 bytes(154..156) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: "verus", span: #0 bytes(154..156) }, Punct { ch: ':', spacing: Joint, span: #6 bytes(139..1780) }, Punct { ch: ':', spacing: Alone, span: #6 bytes(139..1780) }, Ident { ident: "internal", span: #0 bytes(154..156) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "verus_macro", span: #6 bytes(139..1780) }], span: #6 bytes(139..1780) }], span: #0 bytes(154..156) }, Punct { ch: '#', spacing: Alone, span: #0 bytes(149..153) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: "verus", span: #0 bytes(149..153) }, Punct { ch: ':', spacing: Joint, span: #6 bytes(139..1780) }, Punct { ch: ':', spacing: Alone, span: #6 bytes(139..1780) }, Ident { ident: "internal", span: #0 bytes(149..153) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "spec", span: #6 bytes(139..1780) }], span: #6 bytes(139..1780) }], span: #0 bytes(149..153) }, Ident { ident: "fn", span: #0 bytes(154..156) }, Ident { ident: "divides", span: #0 bytes(157..164) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "factor", span: #0 bytes(165..171) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(171..172) }, Ident { ident: "nat", span: #0 bytes(173..176) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(176..177) }, Ident { ident: "candidate", span: #0 bytes(178..187) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(187..188) }, Ident { ident: "nat", span: #0 bytes(189..192) }], span: #0 bytes(164..193) }, Punct { ch: '-', spacing: Joint, span: #0 bytes(194..195) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(195..196) }, Ident { ident: "bool", span: #0 bytes(197..201) }, Group { delimiter: Brace, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(206..216) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(206..216) }, Ident { ident: "builtin", span: #0 bytes(206..216) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(206..216) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(206..216) }, Ident { ident: "recommends", span: #0 bytes(206..216) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(217..218) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(217..218) }, Ident { ident: "builtin", span: #0 bytes(217..218) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(217..218) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(217..218) }, Ident { ident: "spec_literal_nat", span: #0 bytes(217..218) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Str, symbol: "1", suffix: None, span: #6 bytes(139..1780) }], span: #0 bytes(217..218) }], span: #0 bytes(217..218) }, Punct { ch: '.', spacing: Alone, span: #0 bytes(217..228) }, Ident { ident: "spec_le", span: #0 bytes(217..228) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "factor", span: #0 bytes(222..228) }], span: #0 bytes(217..228) }], span: #0 bytes(206..216) }], span: #0 bytes(206..216) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(206..216) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(235..258) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(235..258) }, Ident { ident: "builtin", span: #0 bytes(235..258) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(235..258) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(235..258) }, Ident { ident: "spec_eq", span: #0 bytes(235..258) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "candidate", span: #0 bytes(235..244) }], span: #0 bytes(235..244) }, Punct { ch: '.', spacing: Alone, span: #0 bytes(235..253) }, Ident { ident: "spec_euclidean_mod", span: #0 bytes(235..253) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "factor", span: #0 bytes(247..253) }], span: #0 bytes(235..253) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(235..258) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(257..258) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(257..258) }, Ident { ident: "builtin", span: #0 bytes(257..258) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(257..258) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(257..258) }, Ident { ident: "spec_literal_nat", span: #0 bytes(257..258) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Str, symbol: "0", suffix: None, span: #6 bytes(139..1780) }], span: #0 bytes(257..258) }], span: #0 bytes(235..258) }], span: #0 bytes(229..260) }, Punct { ch: '#', spacing: Alone, span: #0 bytes(267..269) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: "verus", span: #0 bytes(267..269) }, Punct { ch: ':', spacing: Joint, span: #6 bytes(139..1780) }, Punct { ch: ':', spacing: Alone, span: #6 bytes(139..1780) }, Ident { ident: "internal", span: #0 bytes(267..269) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "verus_macro", span: #6 bytes(139..1780) }], span: #6 bytes(139..1780) }], span: #0 bytes(267..269) }, Punct { ch: '#', spacing: Alone, span: #0 bytes(262..266) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: "verus", span: #0 bytes(262..266) }, Punct { ch: ':', spacing: Joint, span: #6 bytes(139..1780) }, Punct { ch: ':', spacing: Alone, span: #6 bytes(139..1780) }, Ident { ident: "internal", span: #0 bytes(262..266) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "spec", span: #6 bytes(139..1780) }], span: #6 bytes(139..1780) }], span: #0 bytes(262..266) }, Ident { ident: "fn", span: #0 bytes(267..269) }, Ident { ident: "is_prime", span: #0 bytes(270..278) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "candidate", span: #0 bytes(279..288) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(288..289) }, Ident { ident: "nat", span: #0 bytes(290..293) }], span: #0 bytes(278..294) }, Punct { ch: '-', spacing: Joint, span: #0 bytes(295..296) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(296..297) }, Ident { ident: "bool", span: #0 bytes(298..302) }, Group { delimiter: Brace, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(313..314) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(313..314) }, Ident { ident: "builtin", span: #0 bytes(313..314) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(313..314) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(313..314) }, Ident { ident: "spec_literal_nat", span: #0 bytes(313..314) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Str, symbol: "1", suffix: None, span: #6 bytes(139..1780) }], span: #0 bytes(313..314) }], span: #0 bytes(313..314) }, Punct { ch: '.', spacing: Alone, span: #0 bytes(313..326) }, Ident { ident: "spec_lt", span: #0 bytes(313..326) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "candidate", span: #0 bytes(317..326) }], span: #0 bytes(313..326) }], span: #0 bytes(313..326) }, Punct { ch: '&', spacing: Joint, span: #0 bytes(331..334) }, Punct { ch: '&', spacing: Alone, span: #0 bytes(331..334) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(335..409) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(335..409) }, Ident { ident: "builtin", span: #0 bytes(335..409) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(335..409) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(335..409) }, Ident { ident: "forall", span: #0 bytes(335..409) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: '|', spacing: Alone, span: #0 bytes(341..342) }, Ident { ident: "factor", span: #0 bytes(342..348) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(348..349) }, Ident { ident: "nat", span: #0 bytes(350..353) }, Punct { ch: '|', spacing: Alone, span: #0 bytes(353..354) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(355..409) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..409) }, Ident { ident: "builtin", span: #0 bytes(355..409) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(355..409) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..409) }, Ident { ident: "imply", span: #0 bytes(355..409) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(355..356) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..356) }, Ident { ident: "builtin", span: #0 bytes(355..356) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(355..356) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..356) }, Ident { ident: "spec_chained_cmp", span: #0 bytes(355..356) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(355..377) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..377) }, Ident { ident: "builtin", span: #0 bytes(355..377) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(355..377) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..377) }, Ident { ident: "spec_chained_lt", span: #0 bytes(355..377) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(355..365) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..365) }, Ident { ident: "builtin", span: #0 bytes(355..365) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(355..365) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..365) }, Ident { ident: "spec_chained_lt", span: #0 bytes(355..365) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(355..356) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..356) }, Ident { ident: "builtin", span: #0 bytes(355..356) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(355..356) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..356) }, Ident { ident: "spec_chained_value", span: #0 bytes(355..356) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(355..356) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..356) }, Ident { ident: "builtin", span: #0 bytes(355..356) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(355..356) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..356) }, Ident { ident: "spec_literal_nat", span: #0 bytes(355..356) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Str, symbol: "1", suffix: None, span: #6 bytes(139..1780) }], span: #0 bytes(355..356) }], span: #0 bytes(355..356) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(355..365) }, Ident { ident: "factor", span: #0 bytes(359..365) }], span: #0 bytes(355..365) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(355..377) }, Ident { ident: "candidate", span: #0 bytes(368..377) }], span: #0 bytes(355..377) }], span: #0 bytes(355..356) }, Punct { ch: ',', spacing: Alone, span: #6 bytes(139..1780) }, Punct { ch: '!', spacing: Alone, span: #0 bytes(382..383) }, Ident { ident: "divides", span: #0 bytes(383..390) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "factor", span: #0 bytes(391..397) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(397..398) }, Ident { ident: "candidate", span: #0 bytes(399..408) }], span: #0 bytes(390..409) }], span: #0 bytes(355..409) }], span: #0 bytes(335..409) }], span: #0 bytes(335..409) }], span: #0 bytes(303..411) }, Punct { ch: '#', spacing: Alone, span: #0 bytes(418..420) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: "verus", span: #0 bytes(418..420) }, Punct { ch: ':', spacing: Joint, span: #6 bytes(139..1780) }, Punct { ch: ':', spacing: Alone, span: #6 bytes(139..1780) }, Ident { ident: "internal", span: #0 bytes(418..420) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "verus_macro", span: #6 bytes(139..1780) }], span: #6 bytes(139..1780) }], span: #0 bytes(418..420) }, Punct { ch: '#', spacing: Alone, span: #0 bytes(413..417) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: "verus", span: #0 bytes(413..417) }, Punct { ch: ':', spacing: Joint, span: #6 bytes(139..1780) }, Punct { ch: ':', spacing: Alone, span: #6 bytes(139..1780) }, Ident { ident: "internal", span: #0 bytes(413..417) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "spec", span: #6 bytes(139..1780) }], span: #6 bytes(139..1780) }], span: #0 bytes(413..417) }, Ident { ident: "fn", span: #0 bytes(418..420) }, Ident { ident: "is_three_prime", span: #0 bytes(421..435) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(435..437) }, Punct { ch: '-', spacing: Joint, span: #0 bytes(438..439) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(439..440) }, Ident { ident: "bool", span: #0 bytes(441..445) }, Group { delimiter: Brace, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(456..457) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(456..457) }, Ident { ident: "builtin", span: #0 bytes(456..457) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(456..457) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(456..457) }, Ident { ident: "spec_literal_nat", span: #0 bytes(456..457) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Str, symbol: "1", suffix: None, span: #6 bytes(139..1780) }], span: #0 bytes(456..457) }], span: #0 bytes(456..457) }, Punct { ch: '.', spacing: Alone, span: #0 bytes(456..461) }, Ident { ident: "spec_lt", span: #0 bytes(456..461) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(460..461) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(460..461) }, Ident { ident: "builtin", span: #0 bytes(460..461) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(460..461) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(460..461) }, Ident { ident: "spec_literal_nat", span: #0 bytes(460..461) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Str, symbol: "3", suffix: None, span: #6 bytes(139..1780) }], span: #0 bytes(460..461) }], span: #0 bytes(456..461) }], span: #0 bytes(456..461) }, Punct { ch: '&', spacing: Joint, span: #0 bytes(466..469) }, Punct { ch: '&', spacing: Alone, span: #0 bytes(466..469) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: '!', spacing: Alone, span: #0 bytes(470..471) }, Ident { ident: "divides", span: #0 bytes(471..478) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(479..480) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(479..480) }, Ident { ident: "builtin", span: #0 bytes(479..480) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(479..480) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(479..480) }, Ident { ident: "spec_literal_integer", span: #0 bytes(479..480) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Str, symbol: "2", suffix: None, span: #6 bytes(139..1780) }], span: #0 bytes(479..480) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(480..481) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(482..483) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(482..483) }, Ident { ident: "builtin", span: #0 bytes(482..483) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(482..483) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(482..483) }, Ident { ident: "spec_literal_integer", span: #0 bytes(482..483) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Str, symbol: "3", suffix: None, span: #6 bytes(139..1780) }], span: #0 bytes(482..483) }], span: #0 bytes(478..484) }], span: #0 bytes(470..484) }], span: #0 bytes(446..487) }, Punct { ch: '#', spacing: Alone, span: #0 bytes(489..491) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: "verus", span: #0 bytes(489..491) }, Punct { ch: ':', spacing: Joint, span: #6 bytes(139..1780) }, Punct { ch: ':', spacing: Alone, span: #6 bytes(139..1780) }, Ident { ident: "internal", span: #0 bytes(489..491) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "verus_macro", span: #6 bytes(139..1780) }], span: #6 bytes(139..1780) }], span: #0 bytes(489..491) }, Ident { ident: "fn", span: #0 bytes(489..491) }, Ident { ident: "main", span: #0 bytes(492..496) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(496..498) }, Group { delimiter: Brace, stream: TokenStream [Punct { ch: '#', spacing: Alone, span: #0 bytes(591..597) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: "verifier", span: #0 bytes(591..597) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(591..597) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(591..597) }, Ident { ident: "proof_block", span: #0 bytes(591..597) }], span: #0 bytes(591..597) }, Group { delimiter: Brace, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(591..597) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(591..597) }, Ident { ident: "builtin", span: #0 bytes(591..597) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(591..597) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(591..597) }, Ident { ident: "assert_", span: #0 bytes(591..597) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "is_prime", span: #0 bytes(598..606) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(607..608) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(607..608) }, Ident { ident: "builtin", span: #0 bytes(607..608) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(607..608) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(607..608) }, Ident { ident: "spec_literal_integer", span: #0 bytes(607..608) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Str, symbol: "3", suffix: None, span: #6 bytes(139..1780) }], span: #0 bytes(607..608) }], span: #0 bytes(606..609) }], span: #0 bytes(591..597) }], span: #0 bytes(591..597) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(610..611) }, Punct { ch: '#', spacing: Alone, span: #0 bytes(616..622) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: "verifier", span: #0 bytes(616..622) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(616..622) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(616..622) }, Ident { ident: "proof_block", span: #0 bytes(616..622) }], span: #0 bytes(616..622) }, Group { delimiter: Brace, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(616..622) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(616..622) }, Ident { ident: "builtin", span: #0 bytes(616..622) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(616..622) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(616..622) }, Ident { ident: "assert_", span: #0 bytes(616..622) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "is_three_prime", span: #0 bytes(623..637) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(637..639) }], span: #0 bytes(616..622) }], span: #0 bytes(616..622) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(640..641) }], span: #0 bytes(499..1777) }]
Modified: TokenStream [Punct { ch: '#', spacing: Alone, span: #0 bytes(154..156) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: "verus", span: #0 bytes(154..156) }, Punct { ch: ':', spacing: Joint, span: #6 bytes(139..1780) }, Punct { ch: ':', spacing: Alone, span: #6 bytes(139..1780) }, Ident { ident: "internal", span: #0 bytes(154..156) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "verus_macro", span: #6 bytes(139..1780) }], span: #6 bytes(139..1780) }], span: #0 bytes(154..156) }, Punct { ch: '#', spacing: Alone, span: #0 bytes(149..153) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: "verus", span: #0 bytes(149..153) }, Punct { ch: ':', spacing: Joint, span: #6 bytes(139..1780) }, Punct { ch: ':', spacing: Alone, span: #6 bytes(139..1780) }, Ident { ident: "internal", span: #0 bytes(149..153) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "spec", span: #6 bytes(139..1780) }], span: #6 bytes(139..1780) }], span: #0 bytes(149..153) }, Ident { ident: "fn", span: #0 bytes(154..156) }, Ident { ident: "divides", span: #0 bytes(157..164) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "factor", span: #0 bytes(165..171) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(171..172) }, Ident { ident: "nat", span: #0 bytes(173..176) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(176..177) }, Ident { ident: "candidate", span: #0 bytes(178..187) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(187..188) }, Ident { ident: "nat", span: #0 bytes(189..192) }], span: #0 bytes(164..193) }, Punct { ch: '-', spacing: Joint, span: #0 bytes(194..195) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(195..196) }, Ident { ident: "bool", span: #0 bytes(197..201) }, Group { delimiter: Brace, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(206..216) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(206..216) }, Ident { ident: "builtin", span: #0 bytes(206..216) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(206..216) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(206..216) }, Ident { ident: "recommends", span: #0 bytes(206..216) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(217..218) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(217..218) }, Ident { ident: "builtin", span: #0 bytes(217..218) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(217..218) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(217..218) }, Ident { ident: "spec_literal_nat", span: #0 bytes(217..218) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Str, symbol: "1", suffix: None, span: #6 bytes(139..1780) }], span: #0 bytes(217..218) }], span: #0 bytes(217..218) }, Punct { ch: '.', spacing: Alone, span: #0 bytes(217..228) }, Ident { ident: "spec_le", span: #0 bytes(217..228) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "factor", span: #0 bytes(222..228) }], span: #0 bytes(217..228) }], span: #0 bytes(206..216) }], span: #0 bytes(206..216) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(206..216) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(235..258) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(235..258) }, Ident { ident: "builtin", span: #0 bytes(235..258) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(235..258) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(235..258) }, Ident { ident: "spec_eq", span: #0 bytes(235..258) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "candidate", span: #0 bytes(235..244) }], span: #0 bytes(235..244) }, Punct { ch: '.', spacing: Alone, span: #0 bytes(235..253) }, Ident { ident: "spec_euclidean_mod", span: #0 bytes(235..253) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "factor", span: #0 bytes(247..253) }], span: #0 bytes(235..253) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(235..258) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(257..258) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(257..258) }, Ident { ident: "builtin", span: #0 bytes(257..258) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(257..258) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(257..258) }, Ident { ident: "spec_literal_nat", span: #0 bytes(257..258) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Str, symbol: "0", suffix: None, span: #6 bytes(139..1780) }], span: #0 bytes(257..258) }], span: #0 bytes(235..258) }], span: #0 bytes(229..260) }, Punct { ch: '#', spacing: Alone, span: #0 bytes(267..269) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: "verus", span: #0 bytes(267..269) }, Punct { ch: ':', spacing: Joint, span: #6 bytes(139..1780) }, Punct { ch: ':', spacing: Alone, span: #6 bytes(139..1780) }, Ident { ident: "internal", span: #0 bytes(267..269) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "verus_macro", span: #6 bytes(139..1780) }], span: #6 bytes(139..1780) }], span: #0 bytes(267..269) }, Punct { ch: '#', spacing: Alone, span: #0 bytes(262..266) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: "verus", span: #0 bytes(262..266) }, Punct { ch: ':', spacing: Joint, span: #6 bytes(139..1780) }, Punct { ch: ':', spacing: Alone, span: #6 bytes(139..1780) }, Ident { ident: "internal", span: #0 bytes(262..266) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "spec", span: #6 bytes(139..1780) }], span: #6 bytes(139..1780) }], span: #0 bytes(262..266) }, Ident { ident: "fn", span: #0 bytes(267..269) }, Ident { ident: "is_prime", span: #0 bytes(270..278) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "candidate", span: #0 bytes(279..288) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(288..289) }, Ident { ident: "nat", span: #0 bytes(290..293) }], span: #0 bytes(278..294) }, Punct { ch: '-', spacing: Joint, span: #0 bytes(295..296) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(296..297) }, Ident { ident: "bool", span: #0 bytes(298..302) }, Group { delimiter: Brace, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(313..314) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(313..314) }, Ident { ident: "builtin", span: #0 bytes(313..314) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(313..314) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(313..314) }, Ident { ident: "spec_literal_nat", span: #0 bytes(313..314) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Str, symbol: "1", suffix: None, span: #6 bytes(139..1780) }], span: #0 bytes(313..314) }], span: #0 bytes(313..314) }, Punct { ch: '.', spacing: Alone, span: #0 bytes(313..326) }, Ident { ident: "spec_lt", span: #0 bytes(313..326) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "candidate", span: #0 bytes(317..326) }], span: #0 bytes(313..326) }], span: #0 bytes(313..326) }, Punct { ch: '&', spacing: Joint, span: #0 bytes(331..334) }, Punct { ch: '&', spacing: Alone, span: #0 bytes(331..334) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(335..409) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(335..409) }, Ident { ident: "builtin", span: #0 bytes(335..409) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(335..409) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(335..409) }, Ident { ident: "forall", span: #0 bytes(335..409) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: '|', spacing: Alone, span: #0 bytes(341..342) }, Ident { ident: "factor", span: #0 bytes(342..348) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(348..349) }, Ident { ident: "nat", span: #0 bytes(350..353) }, Punct { ch: '|', spacing: Alone, span: #0 bytes(353..354) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(355..409) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..409) }, Ident { ident: "builtin", span: #0 bytes(355..409) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(355..409) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..409) }, Ident { ident: "imply", span: #0 bytes(355..409) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(355..356) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..356) }, Ident { ident: "builtin", span: #0 bytes(355..356) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(355..356) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..356) }, Ident { ident: "spec_chained_cmp", span: #0 bytes(355..356) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(355..377) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..377) }, Ident { ident: "builtin", span: #0 bytes(355..377) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(355..377) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..377) }, Ident { ident: "spec_chained_lt", span: #0 bytes(355..377) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(355..365) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..365) }, Ident { ident: "builtin", span: #0 bytes(355..365) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(355..365) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..365) }, Ident { ident: "spec_chained_lt", span: #0 bytes(355..365) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(355..356) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..356) }, Ident { ident: "builtin", span: #0 bytes(355..356) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(355..356) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..356) }, Ident { ident: "spec_chained_value", span: #0 bytes(355..356) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(355..356) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..356) }, Ident { ident: "builtin", span: #0 bytes(355..356) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(355..356) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(355..356) }, Ident { ident: "spec_literal_nat", span: #0 bytes(355..356) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Str, symbol: "1", suffix: None, span: #6 bytes(139..1780) }], span: #0 bytes(355..356) }], span: #0 bytes(355..356) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(355..365) }, Ident { ident: "factor", span: #0 bytes(359..365) }], span: #0 bytes(355..365) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(355..377) }, Ident { ident: "candidate", span: #0 bytes(368..377) }], span: #0 bytes(355..377) }], span: #0 bytes(355..356) }, Punct { ch: ',', spacing: Alone, span: #6 bytes(139..1780) }, Punct { ch: '!', spacing: Alone, span: #0 bytes(382..383) }, Ident { ident: "divides", span: #0 bytes(383..390) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "factor", span: #0 bytes(391..397) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(397..398) }, Ident { ident: "candidate", span: #0 bytes(399..408) }], span: #0 bytes(390..409) }], span: #0 bytes(355..409) }], span: #0 bytes(335..409) }], span: #0 bytes(335..409) }], span: #0 bytes(303..411) }, Punct { ch: '#', spacing: Alone, span: #0 bytes(418..420) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: "verus", span: #0 bytes(418..420) }, Punct { ch: ':', spacing: Joint, span: #6 bytes(139..1780) }, Punct { ch: ':', spacing: Alone, span: #6 bytes(139..1780) }, Ident { ident: "internal", span: #0 bytes(418..420) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "verus_macro", span: #6 bytes(139..1780) }], span: #6 bytes(139..1780) }], span: #0 bytes(418..420) }, Punct { ch: '#', spacing: Alone, span: #0 bytes(413..417) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: "verus", span: #0 bytes(413..417) }, Punct { ch: ':', spacing: Joint, span: #6 bytes(139..1780) }, Punct { ch: ':', spacing: Alone, span: #6 bytes(139..1780) }, Ident { ident: "internal", span: #0 bytes(413..417) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "spec", span: #6 bytes(139..1780) }], span: #6 bytes(139..1780) }], span: #0 bytes(413..417) }, Ident { ident: "fn", span: #0 bytes(418..420) }, Ident { ident: "is_three_prime", span: #0 bytes(421..435) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(435..437) }, Punct { ch: '-', spacing: Joint, span: #0 bytes(438..439) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(439..440) }, Ident { ident: "bool", span: #0 bytes(441..445) }, Group { delimiter: Brace, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(456..457) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(456..457) }, Ident { ident: "builtin", span: #0 bytes(456..457) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(456..457) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(456..457) }, Ident { ident: "spec_literal_nat", span: #0 bytes(456..457) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Str, symbol: "1", suffix: None, span: #6 bytes(139..1780) }], span: #0 bytes(456..457) }], span: #0 bytes(456..457) }, Punct { ch: '.', spacing: Alone, span: #0 bytes(456..461) }, Ident { ident: "spec_lt", span: #0 bytes(456..461) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(460..461) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(460..461) }, Ident { ident: "builtin", span: #0 bytes(460..461) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(460..461) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(460..461) }, Ident { ident: "spec_literal_nat", span: #0 bytes(460..461) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Str, symbol: "3", suffix: None, span: #6 bytes(139..1780) }], span: #0 bytes(460..461) }], span: #0 bytes(456..461) }], span: #0 bytes(456..461) }, Punct { ch: '&', spacing: Joint, span: #0 bytes(466..469) }, Punct { ch: '&', spacing: Alone, span: #0 bytes(466..469) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: '!', spacing: Alone, span: #0 bytes(470..471) }, Ident { ident: "divides", span: #0 bytes(471..478) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(479..480) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(479..480) }, Ident { ident: "builtin", span: #0 bytes(479..480) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(479..480) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(479..480) }, Ident { ident: "spec_literal_integer", span: #0 bytes(479..480) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Str, symbol: "2", suffix: None, span: #6 bytes(139..1780) }], span: #0 bytes(479..480) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(480..481) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(482..483) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(482..483) }, Ident { ident: "builtin", span: #0 bytes(482..483) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(482..483) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(482..483) }, Ident { ident: "spec_literal_integer", span: #0 bytes(482..483) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Str, symbol: "3", suffix: None, span: #6 bytes(139..1780) }], span: #0 bytes(482..483) }], span: #0 bytes(478..484) }], span: #0 bytes(470..484) }], span: #0 bytes(446..487) }, Punct { ch: '#', spacing: Alone, span: #0 bytes(489..491) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: "verus", span: #0 bytes(489..491) }, Punct { ch: ':', spacing: Joint, span: #6 bytes(139..1780) }, Punct { ch: ':', spacing: Alone, span: #6 bytes(139..1780) }, Ident { ident: "internal", span: #0 bytes(489..491) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "verus_macro", span: #6 bytes(139..1780) }], span: #6 bytes(139..1780) }], span: #0 bytes(489..491) }, Ident { ident: "fn", span: #0 bytes(489..491) }, Ident { ident: "main", span: #0 bytes(492..496) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(496..498) }, Group { delimiter: Brace, stream: TokenStream [Punct { ch: '#', spacing: Alone, span: #0 bytes(591..597) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: "verifier", span: #0 bytes(591..597) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(591..597) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(591..597) }, Ident { ident: "proof_block", span: #0 bytes(591..597) }], span: #0 bytes(591..597) }, Group { delimiter: Brace, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(591..597) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(591..597) }, Ident { ident: "builtin", span: #0 bytes(591..597) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(591..597) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(591..597) }, Ident { ident: "assert_", span: #0 bytes(591..597) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "is_prime", span: #0 bytes(598..606) }, Group { delimiter: Parenthesis, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(607..608) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(607..608) }, Ident { ident: "builtin", span: #0 bytes(607..608) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(607..608) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(607..608) }, Ident { ident: "spec_literal_integer", span: #0 bytes(607..608) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Str, symbol: "3", suffix: None, span: #6 bytes(139..1780) }], span: #0 bytes(607..608) }], span: #0 bytes(606..609) }], span: #0 bytes(591..597) }], span: #0 bytes(591..597) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(610..611) }, Punct { ch: '#', spacing: Alone, span: #0 bytes(616..622) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: "verifier", span: #0 bytes(616..622) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(616..622) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(616..622) }, Ident { ident: "proof_block", span: #0 bytes(616..622) }], span: #0 bytes(616..622) }, Group { delimiter: Brace, stream: TokenStream [Punct { ch: ':', spacing: Joint, span: #0 bytes(616..622) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(616..622) }, Ident { ident: "builtin", span: #0 bytes(616..622) }, Punct { ch: ':', spacing: Joint, span: #0 bytes(616..622) }, Punct { ch: ':', spacing: Alone, span: #0 bytes(616..622) }, Ident { ident: "assert_", span: #0 bytes(616..622) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: "is_three_prime", span: #0 bytes(623..637) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(637..639) }], span: #0 bytes(616..622) }], span: #0 bytes(616..622) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(640..641) }], span: #0 bytes(499..1777) }]
ran
error: assertion failed
  --> /Users/flytre/Projects/verus-finite/finite_examples/primeEx.rs:31:12
   |
31 |     assert(is_prime(3));
   |            ^^^^^^^^^^^ assertion failed

error: aborting due to 1 previous error

verification results:: 0 verified, 1 errors
